<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>C headers</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"/><LINK
REL="HOME"
TITLE="ooc v0.2.1 ninja Language Reference"
HREF="book1.htm"/><LINK
REL="UP"
TITLE="Packages, headers, libraries"
HREF="c519.htm"/><LINK
REL="PREVIOUS"
TITLE="Packages, headers, libraries"
HREF="c519.htm"/><LINK
REL="NEXT"
TITLE="Automagic library management"
HREF="x552.htm"/></HEAD
><BODY
CLASS="section"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>ooc v0.2.1 ninja Language Reference</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c519.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 6. Packages, headers, libraries</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x552.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"/></DIV
><DIV
CLASS="section"
><H1
CLASS="section"
><A
NAME="AEN539"
>C headers</A
></H1
><P
>The ooc compiler allows to use every C function and type as-is. It
      recognizes well-formed typedefs without too much macros
      (<TT
CLASS="literal"
>#define</TT
>s, etc.) in header files.</P
><P
>You can include C headers with the 'include' keyword.</P
><PRE
CLASS="programlisting"
>include SDL/SDL; // equivalent of #include &lt;SDL/SDL.h&gt;</PRE
><P
>For local includes, prefix the path with
      '<TT
CLASS="literal"
>@</TT
>':</P
><PRE
CLASS="programlisting"
>include @myheader; // equivalent of #include "myheader.h"</PRE
><P
>Although including a local header is seldom necessary in ooc,
      since import takes care of all the local imports very well.</P
><P
>If the ooc compiler fails to parse type definitions in a C header,
      and you use them, you can get 'Can't resolve type &lt;type&gt;' compile
      errors. To work around the problem, use the <TT
CLASS="literal"
>ctype</TT
>
      keyword. It simply instructs the ooc compiler that the type is typedef'd
      somewhere in a header, and that it shouldn't worry about it.</P
><PRE
CLASS="programlisting"
>include SDL/SDL; // the SDL headers are full of defines

ctype SDL_Event; // the ooc compiler can't parse this type so we reference it

func wait {

  SDL_Event event; // we can now use it
  SDL_WaitEvents(&amp;event);

}</PRE
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"/><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c519.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x552.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Packages, headers, libraries</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c519.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Automagic library management</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>